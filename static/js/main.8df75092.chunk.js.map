{"version":3,"sources":["colors.js","Warning/styles.js","Warning/index.jsx","Board/helper.js","Board/styles.js","Board/Board.jsx","styles.js","App.js","serviceWorker.js","index.js"],"names":["colors","lightGreen","mediumGray","lightGray","darkBlue","opaqueBlue","2","4","8","16","32","64","128","256","512","1024","2048","Wrapper","styled","div","RestartButton","button","Warning","message","resetGame","onClick","keys","moveAlongAxis","readFromEnd","getFixedAxis","updateRow","size","row","pressedKey","rowLastPos","length","updatedRow","reference","isGameWon","pushBlockToNewRow","block","newValue","push","value","i","_","reverse","noMoviesLeft","newBoard","fixedAxis","sortedBoard","sortBy","currBlock","prevBlock","transposedBoard","isBoardFull","board","getInitialGame","blocks","id","uuidv4","x","Math","floor","random","y","isUpdated","isGameOver","updateBoardFunc","currentBoard","pressedKeyStr","emptySpaces","hasWon","rows","groupBy","newRow","emptySpacesAmount","amount","index","isEqual","randomRow","randomPos","generateNewRandomBlock","BoardWrapper","Block","props","blockColor","column","Board","pressedKeyEvent","useState","updateBoard","useCallback","useEffect","key","TransitionGroup","component","map","item","CSSTransition","timeout","classNames","Content","MOVE_KEYS","App","setPressedKeyEvent","window","addEventListener","event","timeStamp","includes","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8df75092.chunk.js","sourcesContent":["export const colors = {\r\n    lightGreen: '#a3d00c',\r\n    mediumGray: '#b9b9b9',\r\n    lightGray: '#dadada',\r\n    darkBlue: '#344971',\r\n    opaqueBlue: '#2d374a',\r\n    2: '#282c34',\r\n    4: '#253049',\r\n    8: '#1e3769',\r\n    16: '#1a3e86',\r\n    32: '#16429b',\r\n    64: '#1048b8',\r\n    128: '#0748cb',\r\n    256: '#2566e9',\r\n    512: '#5287f1',\r\n    1024: '#73a0f9',\r\n    2048: '#88aaf0'\r\n}\r\n\r\nexport default null;\r\n","import styled from 'styled-components';\r\nimport { colors } from '../colors';\r\n\r\nconst { lightGray, darkBlue, opaqueBlue } = colors;\r\n\r\nexport const Wrapper = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(255, 255, 255, 0.5);\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 60px;\r\n    font-weight: 500;\r\n`;\r\n\r\nexport const RestartButton = styled.button`\r\n    font-size: 25px;\r\n    margin-top: 20px;\r\n    padding: 8px 30px;\r\n    background: linear-gradient(${darkBlue}, ${opaqueBlue});\r\n    color: ${lightGray};\r\n    border-radius: 8px;\r\n    border: 0px;\r\n    font-family: 'Arial';\r\n    letter-spacing: 5px;\r\n\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport default null;","import React from 'react';\r\n\r\nimport { Wrapper, RestartButton } from './styles';\r\n\r\nfunction Warning({ message, resetGame }) {\r\n  return (\r\n    <Wrapper>\r\n      {message}\r\n      <RestartButton onClick={resetGame}>RESTART</RestartButton>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Warning;\r\n\r\n","import { v4 as uuidv4 } from 'uuid';\r\nimport _ from 'lodash';\r\n\r\nimport { colors } from '../colors';\r\n\r\nconst keys = {\r\n  'ArrowLeft': {\r\n    moveAlongAxis: 'x',\r\n    readFromEnd: false,\r\n  },\r\n  'ArrowRight': {\r\n    moveAlongAxis: 'x',\r\n    readFromEnd: true,\r\n  },\r\n  'ArrowDown': {\r\n    moveAlongAxis: 'y',\r\n    readFromEnd: true,\r\n  },\r\n  'ArrowUp': {\r\n    moveAlongAxis: 'y',\r\n    readFromEnd: false,\r\n  }\r\n}\r\n\r\n/*\r\n  If block will move along an axis, the other one is the fixed one.\r\n*/\r\nconst getFixedAxis = moveAlongAxis => (\r\n  moveAlongAxis === 'x' ? 'y' : 'x'\r\n);\r\n\r\nconst updateRow = (size, row, pressedKey) => {\r\n  const { readFromEnd, moveAlongAxis } = pressedKey;\r\n  \r\n  const rowLastPos = row.length - 1;\r\n  const updatedRow = [];\r\n\r\n  let reference = null;\r\n  let isGameWon = false;\r\n\r\n  const pushBlockToNewRow = (block, newValue) => (\r\n    updatedRow.push({\r\n      ...block,\r\n      value: newValue || block.value,\r\n      [moveAlongAxis]: readFromEnd ? size - 1 - updatedRow.length : updatedRow.length\r\n    })\r\n  )\r\n\r\n  /*\r\n    Each block will be pushed into the updated row with a new position based on the\r\n    direction of the movement along the axis and the amount of blocks that are already\r\n    there. In case of a merge, only one of them is going to be maintained only with its\r\n    value updated (multiplied by 2). A reference block is used to keep on track the last\r\n    value evaluated, being possible to know if it's case to merge.\r\n\r\n    Blocks' ids need to be maintained so animations can work properly.\r\n  */\r\n  for (let i = 0; i <= rowLastPos; i++)\r\n  {\r\n    const block = row[readFromEnd ? rowLastPos - i : i];\r\n\r\n    if (!reference)\r\n    {\r\n      reference = block;\r\n      if (i === rowLastPos) { pushBlockToNewRow(block) }\r\n    }\r\n    else if (block.value === reference.value)\r\n    {\r\n      const newValue = block.value * 2;\r\n      pushBlockToNewRow(block, newValue);\r\n      reference = null;\r\n\r\n      if (newValue === 2048) { isGameWon = true; }\r\n    }\r\n    else {\r\n      pushBlockToNewRow(reference);\r\n      reference = block;\r\n      if (i === rowLastPos) { pushBlockToNewRow(block); }\r\n    }\r\n  }\r\n\r\n  return {\r\n    isGameWon,\r\n    row: readFromEnd ? _.reverse(updatedRow) : updatedRow,\r\n  };\r\n}\r\n\r\n/*\r\n  Checks if there is at least one possible movement when the board\r\n  has no more empty spaces.\r\n*/\r\nconst noMoviesLeft = (newBoard, moveAlongAxis) => {\r\n  const fixedAxis = getFixedAxis(moveAlongAxis);\r\n  const sortedBoard = _.sortBy(newBoard, [fixedAxis, moveAlongAxis]);\r\n  for (let i = 1; i < sortedBoard.length; i++) {\r\n    const currBlock = sortedBoard[i];\r\n    const prevBlock = sortedBoard[i-1];\r\n    if (prevBlock[fixedAxis] === currBlock[fixedAxis] && prevBlock.value === currBlock.value) {\r\n      return false;\r\n    }\r\n  }\r\n  const transposedBoard = _.sortBy(newBoard, [moveAlongAxis, fixedAxis]);\r\n  for (let i = 1; i < transposedBoard.length; i++) {\r\n    const currBlock = transposedBoard[i];\r\n    const prevBlock = transposedBoard[i-1];\r\n    if (prevBlock[moveAlongAxis] === currBlock[moveAlongAxis] && prevBlock.value === currBlock.value) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/*\r\n  Generates a new block based on remaining empty spaces\r\n*/\r\nconst generateNewRandomBlock = (size, emptySpaces) => {\r\n  const randomRow = emptySpaces[Math.floor(Math.random() * emptySpaces.length)];\r\n  const randomPos = Math.floor(Math.random() * randomRow.amount);\r\n  const moveAlongAxis = randomRow.pressedKey.moveAlongAxis;\r\n\r\n  return {\r\n    [moveAlongAxis]: randomRow.pressedKey.readFromEnd\r\n      ? randomPos\r\n      : randomPos + size - randomRow.amount,\r\n    [getFixedAxis(moveAlongAxis)]: randomRow.index,\r\n    id: uuidv4(),\r\n    value: Math.random() > 0.1 ? 2 : 4,\r\n  }\r\n}\r\n\r\nconst isBoardFull = (board, size) => board.length === size * size;\r\n\r\nexport const getInitialGame = size => (\r\n  {\r\n    blocks: [\r\n      {\r\n        id: uuidv4(),\r\n        value: 2,\r\n        x: Math.floor(Math.random() * size),\r\n        y: Math.floor(Math.random() * size),\r\n      }\r\n    ],\r\n    isUpdated: true,\r\n    isGameOver: false,\r\n    isGameWon: false,\r\n  }\r\n);\r\n\r\nexport const updateBoardFunc = (size, currentBoard, pressedKeyStr) => {\r\n  const pressedKey = keys[pressedKeyStr];\r\n  const newBoard = [];\r\n  const emptySpaces = [];\r\n  let hasWon = false;\r\n\r\n  // Creates rows based on the move-along axis.\r\n  const rows = _.groupBy(currentBoard, getFixedAxis(pressedKey.moveAlongAxis));\r\n\r\n  for (let i = 0; i < size; i++)\r\n  {\r\n    if (rows[i]) {\r\n      const { isGameWon, row: newRow } = updateRow(size, rows[i], pressedKey);\r\n      hasWon = isGameWon || hasWon;\r\n      newBoard.push(...newRow);\r\n\r\n      const emptySpacesAmount = size - newRow.length;\r\n      if (emptySpacesAmount > 0) {\r\n        emptySpaces.push({ pressedKey, amount: emptySpacesAmount, index: i });\r\n      }\r\n    } else {\r\n      emptySpaces.push({ pressedKey, amount: size, index: i });\r\n    }\r\n  }\r\n\r\n  if (!_.isEqual(currentBoard, newBoard)){\r\n    newBoard.push(generateNewRandomBlock(size, emptySpaces));\r\n  }\r\n\r\n  return ({\r\n    isUpdated: true,\r\n    isGameWon: hasWon,\r\n    isGameOver: isBoardFull(newBoard, size) && noMoviesLeft(newBoard, pressedKey.moveAlongAxis),\r\n    blocks: newBoard\r\n  });\r\n}\r\n\r\nexport const sortBlocksByAxis = (currentBoard, pressedKeyStr) => (\r\n  {\r\n    isUpdated: false,\r\n    blocks: _.sortBy(\r\n      currentBoard,\r\n      [getFixedAxis(keys[pressedKeyStr].moveAlongAxis), keys[pressedKeyStr].moveAlongAxis]\r\n    ),\r\n  }\r\n);\r\n\r\nexport const getBlockColor = value => colors[value];\r\n\r\nexport default null;\r\n","import styled from 'styled-components';\r\nimport { colors } from '../colors';\r\n\r\nconst { lightGreen, mediumGray } = colors;\r\n\r\nexport const BoardWrapper = styled.div`\r\n  padding: 1px;\r\n  background-color: ${lightGreen};\r\n  height: 500px;\r\n  width: 500px;\r\n  position: relative;\r\n\r\n  .block-enter {\r\n    opacity: 0;\r\n  }\r\n  .block-enter-active {\r\n    opacity: 1;\r\n    transition: opacity 150ms ease-in;\r\n  }\r\n  .block-exit {\r\n    opacity: 1;\r\n  }\r\n  .block-exit-active {\r\n    opacity: 0;\r\n    transition: opacity 150ms ease-in;\r\n  }\r\n`;\r\n\r\nexport const Block = styled.div`\r\n  background-color: ${props => props.blockColor};\r\n  border: solid 2px ${lightGreen};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: ${mediumGray};\r\n  font-size: xx-large;\r\n  font-weight: 600;\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  top: ${props => props.row * 125 + 'px'};\r\n  left: ${props => props.column * 125 + 'px'};\r\n  width: 125px;\r\n  height: 125px;\r\n  transition: 150ms;\r\n`;","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\n\r\nimport Warning from '../Warning';\r\n\r\nimport {\r\n  getInitialGame,\r\n  updateBoardFunc,\r\n  sortBlocksByAxis,\r\n  getBlockColor,\r\n} from './helper';\r\nimport { BoardWrapper, Block } from './styles';\r\n\r\nconst SIZE = 4;\r\n\r\nfunction Board({ pressedKeyEvent }) {\r\n  const [board, updateBoard] = useState(getInitialGame(SIZE));\r\n\r\n  const {\r\n    isUpdated,\r\n    isGameWon,\r\n    isGameOver,\r\n    blocks,\r\n  } = board;\r\n\r\n  const resetGame = useCallback(() => {\r\n    updateBoard(getInitialGame());\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (pressedKeyEvent && !isGameOver && !isGameWon) {\r\n      /*\r\n        Because of the way React identifies itens contained in an array, the array needs\r\n        to, primarily, be sorted considering the axis which the movement will accour along.\r\n        After that, the board can be appropriately updated with the blocks new values\r\n        and positions\r\n      */\r\n      updateBoard(sortBlocksByAxis(blocks, pressedKeyEvent.key))\r\n    }\r\n  }, [pressedKeyEvent]);\r\n\r\n  useEffect(() => {\r\n    if (!isUpdated && !isGameOver && !isGameWon) {\r\n      /*\r\n        Board will be updated considering the key that was pressed and the\r\n        current position and value of the blocks\r\n      */\r\n      updateBoard(updateBoardFunc(SIZE, blocks, pressedKeyEvent.key));\r\n    }\r\n  }, [board]);\r\n\r\n  return (\r\n    <BoardWrapper>\r\n      <TransitionGroup component={null}>\r\n        {\r\n          board.blocks.map(item => (\r\n            <CSSTransition\r\n              key={item.id}\r\n              timeout={150}\r\n              classNames=\"block\"\r\n            >\r\n              <Block\r\n                blockColor={getBlockColor(item.value)}\r\n                row={item.y}\r\n                column={item.x}\r\n              >\r\n                {item.value}\r\n              </Block>\r\n            </CSSTransition>\r\n          ))\r\n        }\r\n      </TransitionGroup>\r\n      {\r\n        isGameOver || isGameWon\r\n          ? (\r\n            <Warning\r\n              message={isGameOver ? 'GAME OVER!' : 'CONGRATS!'}\r\n              resetGame={resetGame}\r\n            />\r\n          )\r\n          : null\r\n      }\r\n    </BoardWrapper>\r\n  )\r\n}\r\n\r\nexport default Board;\r\n","import styled from 'styled-components';\r\n\r\nexport const Content = styled.div`\r\n    background-color: #282c34;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    min-height: 100vh;\r\n`;\r\n\r\nexport default null;","import React, { useState, useEffect } from 'react';\nimport Board from './Board/Board';\n\nimport { Content } from './styles';\n\nconst MOVE_KEYS = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\nfunction App() {\n  const [pressedKeyEvent, setPressedKeyEvent] = useState(null);\n\n  useEffect(() => {\n    window.addEventListener('keydown', event => {\n      const { key, timeStamp } = event;\n      if (MOVE_KEYS.includes(key)) {\n        setPressedKeyEvent({ key, timeStamp });\n      }\n    })\n  }, []);\n\n  return (\n    <Content>\n      <Board pressedKeyEvent={pressedKeyEvent} />\n    </Content>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}